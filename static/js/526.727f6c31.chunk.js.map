{"version":3,"file":"static/js/526.727f6c31.chunk.js","mappings":"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","sources":["Api.js","components/MovieInfo/MovieInfo.styled.js","components/MovieInfo/MovieInfo.js","components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.js","pages/Home/Home.styled.js","pages/Home/Home.js"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'f983fc840eb543faba07dcbe6db19b0b';\n\n// Список самых популярых фильмов на сегодня\nexport const fetchMoviesTrending = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\n// Поиск кинофильма по ключевому слову\nexport const fetchSearchMovies = async (query) => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&page=1`\n  );\n  return response.data;\n};\n\n// Запрос полной информации о фильме\nexport const fetchMoviesDetails = async (id) => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\n// Запрос информации о актёрском составе\nexport const fetchMovieCredits = async (id) => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}//credits?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\n// Запрос обзоров\nexport const fetchMovieReviews = async (id) => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}//reviews?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\n","import styled from 'styled-components';\n\nexport const Wrraper = styled.div`\n  position: relative;\n  border-radius: 5px;\n`;\n\nexport const Container = styled.div`\nheight: auto;\nwidth: 100%;\n`;\n\nexport const Img = styled.img`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  object-position: top;\n  transition: transform 500ms cubic-bezier(0.4, 0, 0.2, 1);\n  :hover {\n    transform: scale(1.03);\n    cursor: zoom-in;\n  }\n\n  @media screen and (min-width: 768px) and (max-width: 1169px) {\n  flex-basis: calc(100% / 3 - 20px);\n}\n\n  @media screen and (min-width: 1170px) {\n  flex-basis: calc(100% / 4 - 20px);\n}\n`;\n\n\nexport const Title = styled.h2`\n  display: flex;\n  justify-content: center;\n  padding: 10px;\n  font-weight: 700;\n  color: rgb(0, 0, 0);\n  font-size: 22px;\n  line-height: 1.18;\n  transition: color 500ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n  color: rgb(255, 69, 0);\n}\n  `;\n\nexport const Paragraph = styled.p`\n  position: absolute;\n  top: 5px;\n  right: 15px;\n  padding: 5px;\n  border-radius: 5px;\n  font-size: 22px;\n\n  color: rgb(139, 0, 0);\n  background-color: rgb(0, 255, 255);\n`;\n","// import PropTypes from 'prop-types';\n\nimport { Img, Wrraper, Container, Title, Paragraph } from \"./MovieInfo.styled\";\n\n const MovieInfo = ({ title, vote_average, poster_path }) => {\n\n\n  const posterUrl = `https://image.tmdb.org/t/p/w500/${poster_path}`;\n\n  return (\n    <Wrraper>\n        <Container>\n        <Img\n        src={posterUrl}\n        alt={title}\n        />\n       </Container>\n         <Title>{title}</Title>\n         <Paragraph>{Math.round(vote_average * 10)}%</Paragraph>\n    </Wrraper>\n  );\n};\n\nexport default MovieInfo;\n\n// MovieInfo.propTypes = {\n//   title: PropTypes.string,\n//   poster_path: PropTypes.string,\n//   vote_average: PropTypes.number,\n// };\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\ndisplay: flex;\njustify-content: center;\nalign-items: center;\nflex-wrap: wrap;\ngap: 20px;\nlist-style: none;\n`;\n\nexport const Item = styled.li`\n  border-radius: 2px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\nexport const Img = styled.img`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  object-position: top;\n  transition: transform 500ms cubic-bezier(0.4, 0, 0.2, 1);\n  :hover {\n    transform: scale(1.03);\n    cursor: zoom-in;\n  }\n`;\n\nexport const Title = styled.h2`\n  display: flex;\n  justify-content: center;\n  padding: 10px;\n  font-weight: 700;\n  color: rgb(0, 0, 0);\n  font-size: 22px;\n  line-height: 1.18;\n  transition: color 500ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n  color: rgb(255, 69, 0);\n}\n  `;\n\nexport const Paragraph = styled.p`\nposition: absolute;\ntop: 5px;\nright: 15px;\npadding: 5px;\nborder-radius: 5px;\nfont-size: 22px;\n\ncolor: rgb(139, 0, 0);\nbackground-color: rgb(0, 255, 255);\n`;\n","// import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport MovieInfo from 'components/MovieInfo/MovieInfo';\nimport { List, Item } from './MoviesList.styled';\n\n\n  const MoviesList = ({movies}) => {\n\n  const location = useLocation();\n\n\n  return (\n    <>\n      <List>\n      {movies.map(({id, title, vote_average, poster_path}) => (\n        <Item key={id}>\n          <Link to={`/movies/${id}`} state={ {from: location } }>\n            <MovieInfo\n             title={title}\n             vote_average={vote_average}\n             poster_path={poster_path}\n            />\n          </Link>\n        </Item>\n          ))}\n      </List>\n      </>\n  );\n}\n\nexport default MoviesList;\n\n// MoviesList.propTypes = {\n//   movies: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.number.isRequired,\n//       vote_average: PropTypes.number.isRequired,\n//       title: PropTypes.string,\n//       poster_path: PropTypes.string,\n//     })\n//   ).isRequired,\n// };\n","import styled from 'styled-components';\n\nexport const Title = styled.h1`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-weight: 700;\n  color: rgb(0, 0, 0);\n  font-size: 34px;\n  margin-bottom: 50px;\n`;\n\nexport const List = styled.ul`\ndisplay: flex;\njustify-content: center;\nalign-items: center;\nflex-wrap: wrap;\ngap: 20px;\nlist-style: none;\nmargin-left: -20px;\n  margin-top: -20px;\n`;\n\nexport const Item = styled.li`\n  border-radius: 2px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\n\n\n\n","import { ThreeCircles } from 'react-loader-spinner';\n// import PropTypes from 'prop-types';\n\nimport { useState, useEffect } from 'react';\nimport { fetchMoviesTrending } from \"Api\";\nimport { Title } from './Home.styled';\nimport MoviesList from 'components/MoviesList/MoviesList';\n\n\n  const Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    async function fetchMoviesEffect() {\n      setIsLoading(true);\n        try {\n          const data = await fetchMoviesTrending();\n            setMovies(data.results);\n            // console.log('Home', data.results);\n\n        } catch (error) {\n          setError('Something went wrong:(');\n        } finally {\n          setIsLoading(false);\n        }\n      }\n      fetchMoviesEffect()\n  }, [])\n\n  return (\n    <main>\n    {isLoading && (\n      <ThreeCircles\n      height=\"100\"\n      width=\"100\"\n      color=\"rgb(255, 69, 0)\"\n      wrapperStyle={{ display: 'flex', justifyContent:  'center' }}\n      wrapperClass=\"\"\n      visible={true}\n      ariaLabel=\"three-circles-rotating\"\n      outerCircleColor=\"\"\n      innerCircleColor=\"\"\n      middleCircleColor=\"\"\n      />\n    )}\n      <Title>Trending Today</Title>\n      {movies && <MoviesList movies={movies}/>}\n    {error && <h2>{error}</h2>}\n    </main>\n  );\n};\n\nexport default Home;\n\n\n\n"],"names":["BASE_URL","API_KEY","fetchMoviesTrending","axios","response","data","fetchSearchMovies","query","fetchMoviesDetails","id","fetchMovieCredits","fetchMovieReviews","Wrraper","styled","Container","Img","Title","Paragraph","title","vote_average","poster_path","posterUrl","src","alt","Math","round","List","Item","movies","location","useLocation","map","to","state","from","useState","setMovies","error","setError","isLoading","setIsLoading","useEffect","results","fetchMoviesEffect","height","width","color","wrapperStyle","display","justifyContent","wrapperClass","visible","ariaLabel","outerCircleColor","innerCircleColor","middleCircleColor","MoviesList"],"sourceRoot":""}