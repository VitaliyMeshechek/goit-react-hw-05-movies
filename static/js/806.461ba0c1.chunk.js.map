{"version":3,"file":"static/js/806.461ba0c1.chunk.js","mappings":"mTAEMA,EAAW,gCACXC,EAAU,mCAGHC,EAAmB,mCAAG,oGACVC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,sCACoBC,IAFV,cAC3BG,EAD2B,yBAI1BA,EAASC,MAJiB,2CAAH,qDAQnBC,EAAiB,mCAAG,WAAOC,GAAP,uFACRJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,gCACcC,EADd,kBAC+BM,EAD/B,YADQ,cACzBH,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,sDAQjBG,EAAkB,mCAAG,WAAOC,GAAP,uFACTN,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDS,EADC,oBACaR,IAFJ,cAC1BG,EAD0B,yBAIzBA,EAASC,MAJgB,2CAAH,sDAQlBK,EAAiB,mCAAG,WAAOD,GAAP,uFACRN,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDS,EADC,6BACsBR,IAFd,cACzBG,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,sDAQjBM,EAAiB,mCAAG,WAAOF,GAAP,uFACRN,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDS,EADC,6BACsBR,IAFd,cACzBG,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,qD,kLCpCjBO,EAAOC,EAAAA,GAAAA,GAAH,2CAIJC,EAAOD,EAAAA,GAAAA,GAAH,gKASJE,EAAQF,EAAAA,GAAAA,GAAH,uGAOLG,EAAOH,EAAAA,GAAAA,EAAH,8G,SC2CjB,EAzDkB,WAChB,OAA8BI,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KAEQd,GAAOe,EAAAA,EAAAA,MAAPf,GAmBR,OAjBAgB,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAE8Bd,EAAAA,EAAAA,IAAkBF,GAFhD,OAEUiB,EAFV,OAIIP,EAAWO,EAAWC,SAJ1B,gDAOIN,EAAS,0BAPb,yBASIE,GAAa,GATjB,6EADc,uBAAC,WAAD,wBAcdK,EACD,GAAE,CAACnB,KAGF,2BACGa,IACD,SAAC,KAAD,CACAO,OAAO,MACPC,MAAM,MACNC,MAAM,kBACNC,aAAc,CAAEC,QAAS,OAAQC,eAAiB,UAClDC,aAAa,GACbC,SAAS,EACTC,UAAU,yBACVC,iBAAiB,GACjBC,iBAAiB,GACjBC,kBAAkB,MAGlB,2BACGtB,IACC,SAACN,EAAD,UACGM,EAAQuB,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASlC,EAApB,EAAoBA,GAApB,OACX,UAACK,EAAD,YACE,SAACC,EAAD,UAAQ2B,KACR,SAAC1B,EAAD,UAAO2B,MAFElC,EADA,MAQfW,IAAS,0EAIlB,C","sources":["Api.js","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.js"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'f983fc840eb543faba07dcbe6db19b0b';\n\n// Список самых популярых фильмов на сегодня\nexport const fetchMoviesTrending = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\n// Поиск кинофильма по ключевому слову\nexport const fetchSearchMovies = async (query) => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&page=1`\n  );\n  return response.data;\n};\n\n// Запрос полной информации о фильме\nexport const fetchMoviesDetails = async (id) => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\n// Запрос информации о актёрском составе\nexport const fetchMovieCredits = async (id) => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}//credits?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\n// Запрос обзоров\nexport const fetchMovieReviews = async (id) => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}//reviews?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\nlist-style: none;\n`;\n\nexport const Item = styled.li`\n display: flex;\n justify-content: center;\n align-items: center;\n flex-direction: column;\n margin-left: auto;\n margin-right: auto;\n`;\n\nexport const Title = styled.h2`\nfont-weight: 700;\ncolor: rgb(0, 0, 0);\nfont-size: 22px;\nline-height: 1.18;\n`;\n\nexport const Text = styled.p`\n font-weight: 500;\n  color: rgb(0, 0, 0);\n  font-size: 18px;\n  line-height: 1.14;\n`;\n","import { ThreeCircles } from 'react-loader-spinner';\nimport PropTypes from 'prop-types';\n\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieReviews } from 'Api';\nimport { List, Title, Text, Item } from './Reviews.styled';\n\n  const Reviews = () => {\n  const [reviews, setReviews] = useState([])\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { id } = useParams();\n\n  useEffect(() => {\n    async function fetchMovieReviewsEffect() {\n      try {\n        const reviewData  = await fetchMovieReviews(id);\n\n        setReviews(reviewData.results);\n\n      } catch (error) {\n        setError('Something went wrong:(');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMovieReviewsEffect();\n  }, [id]);\n\n  return (\n    <div>\n      {isLoading && (\n      <ThreeCircles\n      height=\"100\"\n      width=\"100\"\n      color=\"rgb(255, 69, 0)\"\n      wrapperStyle={{ display: 'flex', justifyContent:  'center' }}\n      wrapperClass=\"\"\n      visible={true}\n      ariaLabel=\"three-circles-rotating\"\n      outerCircleColor=\"\"\n      innerCircleColor=\"\"\n      middleCircleColor=\"\"\n      />\n    )}\n      <div>\n        {reviews && (\n          <List>\n            {reviews.map(({ author, content, id }) => (\n              <Item key={id}>\n                <Title>{author}</Title>\n                <Text>{content}</Text>\n              </Item>\n            ))}\n          </List>\n        )}\n        {(error && <h2>We don't have any reviews for this movie</h2>)}\n      </div>\n    </div>\n  );\n};\n\nexport default Reviews;\n\nReviews.propTypes = {\n  reviews: PropTypes.arrayOf(\n      PropTypes.shape({\n        author: PropTypes.string.isRequired,\n        content: PropTypes.string.isRequired,\n        id: PropTypes.number.isRequired,\n      })\n  )\n};\n"],"names":["BASE_URL","API_KEY","fetchMoviesTrending","axios","response","data","fetchSearchMovies","query","fetchMoviesDetails","id","fetchMovieCredits","fetchMovieReviews","List","styled","Item","Title","Text","useState","reviews","setReviews","error","setError","isLoading","setIsLoading","useParams","useEffect","reviewData","results","fetchMovieReviewsEffect","height","width","color","wrapperStyle","display","justifyContent","wrapperClass","visible","ariaLabel","outerCircleColor","innerCircleColor","middleCircleColor","map","author","content"],"sourceRoot":""}