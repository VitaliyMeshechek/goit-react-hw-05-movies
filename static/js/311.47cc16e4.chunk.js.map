{"version":3,"file":"static/js/311.47cc16e4.chunk.js","mappings":"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","sources":["Api.js","components/Cast/Cast.styled.js","components/Profile/Profile.js","components/Cast/Cast.js"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'f983fc840eb543faba07dcbe6db19b0b';\n\n// Список самых популярых фильмов на сегодня\nexport const fetchMoviesTrending = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\n// Поиск кинофильма по ключевому слову\nexport const fetchSearchMovies = async (query) => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&page=1`\n  );\n  return response.data;\n};\n\n// Запрос полной информации о фильме\nexport const fetchMoviesDetails = async (id) => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\n// Запрос информации о актёрском составе\nexport const fetchMovieCredits = async (id) => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}//credits?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\n// Запрос обзоров\nexport const fetchMovieReviews = async (id) => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}//reviews?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\n","import styled from 'styled-components';\n\nexport const Wrraper = styled.div`\ndisplay: flex;\njustify-content: start;\nalign-items: center;\nflex-wrap: wrap;\n`;\n\nexport const Container = styled.div`\ndisplay: flex;\njustify-content: start;\nalign-items: center;\nflex-wrap: wrap;\n`;\n\nexport const List = styled.ul`\ndisplay: flex;\njustify-content: center;\nalign-items: center;\nflex-wrap: wrap;\ngap: 20px;\nlist-style: none;\n`;\n\nexport const Img = styled.img`\n  display: block;\n  width: 100%;\n  height: 100%;\n  border-radius: 5px;\n`;\n\nexport const Title = styled.h2`\nfont-weight: 700;\ncolor: rgb(0, 0, 0);\nfont-size: 22px;\nline-height: 1.18;\n`;\n\nexport const Text = styled.p`\n font-weight: 500;\n  color: rgb(0, 0, 0);\n  font-size: 18px;\n  line-height: 1.14;\n`;\n\n\n","import PropTypes from 'prop-types';\n\n\n  const Profile = ({ profile_path, name }) => {\n  const profileUrl = `https://image.tmdb.org/t/p/w500/${profile_path}`;\n\n  return (\n      <div>\n        <img\n        width={175}\n        height={250}\n        src={profileUrl}\n        alt={name}\n        />\n      </div>\n  );\n};\n\nexport default Profile;\n\nProfile.propTypes = {\n  profile_path: PropTypes.string,\n  name: PropTypes.string.isRequired,\n};\n","import { ThreeCircles } from 'react-loader-spinner';\nimport PropTypes from 'prop-types';\n\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCredits } from 'Api';\nimport { Wrraper, Container, List, Title, Text } from './Cast.styled';\nimport Profile from 'components/Profile/Profile';\n\n\n  const Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { id } = useParams();\n\n  useEffect(() => {\n    async function fetchMoviesCreditsEffect() {\n      try {\n        const data  = await fetchMovieCredits(id);\n\n        let newObjectCast = [];\n        const results = data.cast;\n        const filterName = results.map(result => result.name);\n        const actorsName = Array.from(new Set(filterName));\n        actorsName.forEach(name => {\n        newObjectCast.push(results.find(result => result.name === name))\n        })\n\n        setCast(newObjectCast);\n\n      } catch (error) {\n        setError('Something went wrong:(');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMoviesCreditsEffect();\n  }, [id]);\n\n  return (\n    <Wrraper>\n      {isLoading && (\n      <ThreeCircles\n      height=\"100\"\n      width=\"100\"\n      color=\"rgb(255, 69, 0)\"\n      wrapperStyle={{ display: 'flex', justifyContent:  'center' }}\n      wrapperClass=\"\"\n      visible={true}\n      ariaLabel=\"three-circles-rotating\"\n      outerCircleColor=\"\"\n      innerCircleColor=\"\"\n      middleCircleColor=\"\"\n      />\n    )}\n      <Container>\n        <List>\n          {cast.map(({ id, name, profile_path, character }) => (\n            <li key={id}>\n              <Profile profile_path={profile_path} name={name} />\n              <Title>{name}</Title>\n              <Text>{character}</Text>\n            </li>\n          ))}\n        </List>\n        {error && <h2>We don't have any reviews for this movie</h2>}\n      </Container>\n    </Wrraper>\n  );\n};\n\nexport default Cast;\n\nCast.propTypes = {\n  cast: PropTypes.arrayOf(\n      PropTypes.shape({\n          id: PropTypes.number.isRequired,\n          character: PropTypes.string.isRequired,\n          profile_path: PropTypes.string.isRequired,\n          name: PropTypes.string,\n      })\n  )\n};\n"],"names":["BASE_URL","API_KEY","fetchMoviesTrending","axios","response","data","fetchSearchMovies","query","fetchMoviesDetails","id","fetchMovieCredits","fetchMovieReviews","Wrraper","styled","Container","List","Title","Text","profile_path","name","profileUrl","width","height","src","alt","useState","cast","setCast","error","setError","isLoading","setIsLoading","useParams","useEffect","newObjectCast","results","filterName","map","result","Array","from","Set","forEach","push","find","fetchMoviesCreditsEffect","color","wrapperStyle","display","justifyContent","wrapperClass","visible","ariaLabel","outerCircleColor","innerCircleColor","middleCircleColor","character"],"sourceRoot":""}